#include <cupy/carray.cuh>

{#- Always four correlations #}
{%- set corrs = 4 %}

extern "C" __global__ void {{kernel_name}}(
    const CArray<{{angle_type}}, 1> angles,
    CArray<{{out_type}}2, 2> feed_rotation)
{
    const ptrdiff_t & na = angles.shape()[0];  // Number of angles
    const int ba = blockIdx.x*blockDim.x;      // Starting angle index of block
    const int a = ba + threadIdx.x;            // Angle index

    // Guard range of elements
    if(a >= na)
        { return; }

    {{angle_type}} angle_sin;
    {{angle_type}} angle_cos;
    {{angle_type}} angle = angles[a];

    {{sincos_fn}}(angle, &angle_sin, &angle_cos);

    __shared__ __align__(16) {{out_type}}2 matrix[{{blockdimx}} * {{corrs}}];

    {%- if feed_type == 'linear' %}
    matrix[{{corrs}}*threadIdx.x + 0] = make_{{out_type}}2(angle_cos, 0.0);
    matrix[{{corrs}}*threadIdx.x + 1] = make_{{out_type}}2(angle_sin, 0.0);
    matrix[{{corrs}}*threadIdx.x + 2] = make_{{out_type}}2(-angle_sin, 0.0);
    matrix[{{corrs}}*threadIdx.x + 3] = make_{{out_type}}2(angle_cos, 0.0);
    {%- elif feed_type == 'circular' %}
    matrix[{{corrs}}*threadIdx.x + 0] = make_{{out_type}}2(angle_cos, -angle_sin);
    matrix[{{corrs}}*threadIdx.x + 1] = make_{{out_type}}2(0.0, 0.0);
    matrix[{{corrs}}*threadIdx.x + 2] = make_{{out_type}}2(0.0, 0.0);
    matrix[{{corrs}}*threadIdx.x + 3] = make_{{out_type}}2(angle_cos, angle_sin);
    {%- else %}
    {{ throw("Invalid feed_type %s" % feed_type) }}
    {% endif %}

    // Wait for all threads in the block
    // TODO(sjperkins)
    // Redo this at warp granularity with __syncwarp()
    // nx below will need to change to the number of
    // active warp threads __popc() in the warp.
    __syncthreads();

    // Actual number of angles in the block
    const int nx = na - ba >= {{blockdimx}} ? {{blockdimx}} : na - ba;

    {{out_type}}2 * block_itr = &feed_rotation[{{corrs}}*ba];

    #pragma unroll
    for(int CORR=0; CORR < 4; ++CORR)
    {
        int i = nx*CORR + threadIdx.x;
        block_itr[i] = matrix[i];
    }
}
